// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// createTransitiveSequences
size_t createTransitiveSequences(DataFrame df_dbMart, size_t numOfPatients, std::string outputDir, std::string outputFilePrefix, int numOfThreads);
RcppExport SEXP _tSPMPlusR_createTransitiveSequences(SEXP df_dbMartSEXP, SEXP numOfPatientsSEXP, SEXP outputDirSEXP, SEXP outputFilePrefixSEXP, SEXP numOfThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df_dbMart(df_dbMartSEXP);
    Rcpp::traits::input_parameter< size_t >::type numOfPatients(numOfPatientsSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputDir(outputDirSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFilePrefix(outputFilePrefixSEXP);
    Rcpp::traits::input_parameter< int >::type numOfThreads(numOfThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(createTransitiveSequences(df_dbMart, numOfPatients, outputDir, outputFilePrefix, numOfThreads));
    return rcpp_result_gen;
END_RCPP
}
// extractSequencesFromDataFrameAndReturnSparseOnes
DataFrame extractSequencesFromDataFrameAndReturnSparseOnes(DataFrame df_dbMart, size_t numOfPatients, std::string outputDir, std::string outputFilePrefix, double sparsityValue, int numOfThreads);
RcppExport SEXP _tSPMPlusR_extractSequencesFromDataFrameAndReturnSparseOnes(SEXP df_dbMartSEXP, SEXP numOfPatientsSEXP, SEXP outputDirSEXP, SEXP outputFilePrefixSEXP, SEXP sparsityValueSEXP, SEXP numOfThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df_dbMart(df_dbMartSEXP);
    Rcpp::traits::input_parameter< size_t >::type numOfPatients(numOfPatientsSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputDir(outputDirSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFilePrefix(outputFilePrefixSEXP);
    Rcpp::traits::input_parameter< double >::type sparsityValue(sparsityValueSEXP);
    Rcpp::traits::input_parameter< int >::type numOfThreads(numOfThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(extractSequencesFromDataFrameAndReturnSparseOnes(df_dbMart, numOfPatients, outputDir, outputFilePrefix, sparsityValue, numOfThreads));
    return rcpp_result_gen;
END_RCPP
}
// tSPMPlus
int tSPMPlus(int numOfThreads, std::string dbMartCsv, char inputFileDelimiter, std::string outputDir, std::string outputFilesDescription, int patIDColumn, int phenxColumn, int dateColumn, int patientCount, bool createDuration, bool removeSparseBuckets, double sparsity);
RcppExport SEXP _tSPMPlusR_tSPMPlus(SEXP numOfThreadsSEXP, SEXP dbMartCsvSEXP, SEXP inputFileDelimiterSEXP, SEXP outputDirSEXP, SEXP outputFilesDescriptionSEXP, SEXP patIDColumnSEXP, SEXP phenxColumnSEXP, SEXP dateColumnSEXP, SEXP patientCountSEXP, SEXP createDurationSEXP, SEXP removeSparseBucketsSEXP, SEXP sparsitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numOfThreads(numOfThreadsSEXP);
    Rcpp::traits::input_parameter< std::string >::type dbMartCsv(dbMartCsvSEXP);
    Rcpp::traits::input_parameter< char >::type inputFileDelimiter(inputFileDelimiterSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputDir(outputDirSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFilesDescription(outputFilesDescriptionSEXP);
    Rcpp::traits::input_parameter< int >::type patIDColumn(patIDColumnSEXP);
    Rcpp::traits::input_parameter< int >::type phenxColumn(phenxColumnSEXP);
    Rcpp::traits::input_parameter< int >::type dateColumn(dateColumnSEXP);
    Rcpp::traits::input_parameter< int >::type patientCount(patientCountSEXP);
    Rcpp::traits::input_parameter< bool >::type createDuration(createDurationSEXP);
    Rcpp::traits::input_parameter< bool >::type removeSparseBuckets(removeSparseBucketsSEXP);
    Rcpp::traits::input_parameter< double >::type sparsity(sparsitySEXP);
    rcpp_result_gen = Rcpp::wrap(tSPMPlus(numOfThreads, dbMartCsv, inputFileDelimiter, outputDir, outputFilesDescription, patIDColumn, phenxColumn, dateColumn, patientCount, createDuration, removeSparseBuckets, sparsity));
    return rcpp_result_gen;
END_RCPP
}
// testSequencingworkflow
int testSequencingworkflow();
RcppExport SEXP _tSPMPlusR_testSequencingworkflow() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(testSequencingworkflow());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tSPMPlusR_createTransitiveSequences", (DL_FUNC) &_tSPMPlusR_createTransitiveSequences, 5},
    {"_tSPMPlusR_extractSequencesFromDataFrameAndReturnSparseOnes", (DL_FUNC) &_tSPMPlusR_extractSequencesFromDataFrameAndReturnSparseOnes, 6},
    {"_tSPMPlusR_tSPMPlus", (DL_FUNC) &_tSPMPlusR_tSPMPlus, 12},
    {"_tSPMPlusR_testSequencingworkflow", (DL_FUNC) &_tSPMPlusR_testSequencingworkflow, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_tSPMPlusR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
